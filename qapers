#! /usr/bin/env bash
# -----------------------------------------------------------------------------
# qapers -  A simple bash script to manage your library of scientific papers
# 
#           This script manages a library of PDF files by allowing the user to
#           quickly find a file, open it in the default PDF viewer, and
#           maintain a separate directory of annotations on each PDF file.
#
# Created: Sun Sep 20, 2020  08:26pm
# Last modified: Wed Sep 23, 2020  11:00pm
# Copyright: Bedartha Goswami <bedartha@gmail.com>
# -----------------------------------------------------------------------------

USAGE="
qapers -   A simple bash script to manage your library of scientific papers

SYNOPSIS
    qapers [OPTION] [KEYWORD]

DESCRIPTION
    qapers is a simple bash script manages a library of PDF files by allowing
    the user to quickly find a file, open it in the default PDF viewer, and
    maintain a separate directory of annotations on each PDF file. You can use
    it to:

        * Find a PDF file in a directory where you dump all your PDFs
        * Pipe the results from the 'find' option to open a PDF of your choice
        * Open a YAML annotations file to store your notes on the PDF
        * Tag your PDFs using the YAML annotations file
        * Review your previously stored annotations
        * Export the bibliographic info of each PDF in BibTex format
        * Export parts or all of your notes on any PDF in any format you wish

    To function properly, papers needs you to store all your PDF files in PDF_DIR
    in a way that the file name contains the following information in any
    order:

        * year of publication YYYY
        * list of authors (in 'et al.' form for author lists greater than 3 authors)
        * publication name (using a consistent abbreviation convention)
        * a short key-phrase that sums up the title or main message of the article

    An example file name for the publication by Bevacqua et al. in the journal
    _Science Advances_ form Sep 2019 in which the authors study compound
    flooding in Europe in future global warming scenarios
    (https://advances.sciencemag.org/content/5/9/eaaw5531) could be:

    2019_Bevacqua_etal_SciAdv_CompoundFloodingStormSurgeEuropeClimateChange.pdf

    It's a long file name, yes, but it gets the job done. Queries on the
    author, journal name, year of publicaiton or the topics 'CompundFlooding',
    'ClimateChange', 'Climate', 'Flooding', etc. would show this file.

    A list of scientific journal abbreviations can be found here:
    https://www.library.caltech.edu/journal-title-abbreviations

    
OPTIONS
    While the 'find' option is used to search a paper from teh library that
    matches the keywords you provide, the idea is that you narriw down your
    search to one file name, which is then piped to the other options 'open',
    'note', and 'review'.

    find [keyword] ...
        search for papers that match given list of keywords

    open [filename]
        open specified PDF file using PDF_READER

    note [filename]
        open () index.qapers.yaml at the line number corresponding to the
        entry for the paper with given file name

    review [filename]
        concatenate to stdout the bibliographic info including
        annotations and tags (if any) of the paper with given file name
    
    tags [tag] ...
        search for files that match given list of tags. If no tag is
        provided then a list of currently used tags is printed, along
        with the number of papers with each tag

    index [command]
        where [command] can be one of the following two options

        build
            build a new YAML (and JSON) index file from scratch. The new
            index.qapers.yaml file will be populated with initial guesses of
            publication year, journal name, first author, and publication title
            from the PDF file name.
            !!IMPORTANT!! Please back up your index.qapers.yaml before running
            'qapers build' as all annotations will be lost!

        update
            update the existing YAML (and JSON) index file to append new files
            which have been added to PDF_DIR since the last modification of
            index.qapers.json
        

DEPENDENCY
    yq      yq is a lightweight and portable command-line YAML processor
            https://mikefarah.gitbook.io/yq/

    jq      Command-line JSON processor
            Installation on Ubuntu: sudo apt install jq

    gvim    [Optional]
            Vi IMproved - enhanced vi editor
            Installation on Ubuntu: sudo apt install vim-gnome

ENVIRONMENT VARIABLES
    PDF_DIR     Directory containing all PDF files to manage with qapers
    PDF_READER  Name (CLI exectuable) of PDF reader to be used by qapers
    YML_EDITOR  Name (CLI executable) of text editor to use for annotations
    INDEX_YAML  Path-to-file where paper info and notes as YAML will be stored
    INDEX_JSON  Path-to-file where INDEX_YAML file contents are stored as JSON

AUTHOR
    Bedartha Goswami
    bedartha@gmail.com

COPYRIGHT
    Copyright (c) Bedartha Goswami 2020.
    Please visit https://github.com/bedartha/qapers.
    This is free software; see the source code for copying conditions. There is
    NO warranty. Use it at your own risk, or convenience, as the case may be.

"
# -----------------------------------------------------------------------------
# Preamble
# -----------------------------------------------------------------------------
# set environment variables / parameters
PDF_DIR=$HOME/Nextcloud/mlcloud/work/library/papers
PDF_READER=evince
YML_EDITOR=gvim
INDEX_JSON=$PDF_DIR/index.qapers.json
INDEX_YAML=$PDF_DIR/index.qapers.yaml

# helper function to add new PDF files to YAML index file
add_to_yaml () {

    # get input list of PDF filenames, which is in path-to-file form
    LIST_OF_PDFS=$1

    # loop through list of PDFs file names and extract relevant paper info
    for PDF in $LIST_OF_PDFS
    do
        # extract the file name from the much-longer path-to-file
        FNAME=${PDF/$PDF_DIR\//}
        echo $FNAME

        # extract relevant fields - e.g. year, authors, journal
        SHORTEN=${FNAME/\.pdf/}
        YEAR=${SHORTEN/[^0-9.]*/}
        SHORTEN=${SHORTEN/$YEAR\_/}
        TOPIC=${SHORTEN##*\_}
        SHORTEN=${SHORTEN/\_$TOPIC/}
        JOURNAL=${SHORTEN##*\_}
        SHORTEN=${SHORTEN/\_$JOURNAL/}
        AUTHORS=$(echo $SHORTEN | sed -e 's/_/,\ /g')

        # format and write YAML strings to index file
        echo -en "    ""- Paper:\n" >> $INDEX_YAML 
        echo -en "        ""PDF_file: $FNAME\n" >> $INDEX_YAML 
        echo -en "        ""Title: $TOPIC\n" >> $INDEX_YAML
        echo -en "        ""Authors: $AUTHORS\n" >> $INDEX_YAML
        echo -en "        ""Journal: $JOURNAL\n" >> $INDEX_YAML
        echo -en "        ""Year: $YEAR\n" >> $INDEX_YAML
        echo -en "        ""Issue:\n" >> $INDEX_YAML
        echo -en "        ""Pages:\n" >> $INDEX_YAML
        echo -en "        ""Tags: new, unread\n" >> $INDEX_YAML
        echo -en "        ""Notes:\n" >> $INDEX_YAML
        echo -en "            ""Key_Question:\n" >> $INDEX_YAML
        echo -en "            ""Key_Results:\n" >> $INDEX_YAML
        echo -en "            ""Key_Impact:\n" >> $INDEX_YAML
        echo -en "            ""Key_Points:\n" >> $INDEX_YAML
        echo -en "                ""- \n" >> $INDEX_YAML

    done

    echo Done - for $(echo $LIST_OF_PDFS | wc -w) files.

}


# -----------------------------------------------------------------------------
# (Very basic) Input argument parsing
# -----------------------------------------------------------------------------
# exit if no input is given
if [ -z "$1" ]
then
    echo "Please provide an option! See 'qapers help' for more details"
    exit
fi

# exit with error message if inputs are incorrect
if [ $1 != "help" ] && [ $1 != "find" ] && [ $1 != "open" ]
then
    if [ $1 != "note" ] && [ $1 != "review" ] && [ $1 != "tags" ]
    then
        if [ $1 != "index" ]
        then
            echo "Please specify correct input."
            echo "See 'qapers help' for more info."
            exit
        fi
    fi
fi

# help text
if [ $1 = "help" ] || [ $1 = "--help" ] || [ $1 = "-h" ]
then
    echo "$USAGE"
    exit
fi

# -----------------------------------------------------------------------------
# qapers find
# -----------------------------------------------------------------------------
# find a paper that matches given list of keywords
if [ "$1" = "find" ]
then
    if [ -z "$2" ]
    then
        echo "Please specify keyword, such as"
        echo -e "\tYear of publication\t->\tqapers find 2015"
        echo -e "\tName of first author\t->\tqapers find Newman"
        echo -e "\tAbbrev. journal name\t->\tqapers find GeophysResLett"
        echo -e "\tTopic of the paper\t->\tqapers find MJO"
    else
        shift
        JQ_CMD="jq -r '.Index[] .Paper |"
        for KEY in "$@"
        do
            JQ_CMD=$JQ_CMD" select( .PDF_file | contains(\"$KEY\") ) |"
        done
        JQ_CMD=$JQ_CMD" .PDF_file ' $INDEX_JSON"
        eval $JQ_CMD
    fi
fi

# -----------------------------------------------------------------------------
# qapers open
# -----------------------------------------------------------------------------
# open specified paper for reading
if [ "$1" = "open" ]
then
    $PDF_READER $PDF_DIR/$2 &
    disown
fi

# -----------------------------------------------------------------------------
# qapers note
# -----------------------------------------------------------------------------
# open YAML file for annotations for specified paper
if [ "$1" = "note" ]
then
    if [ -z "$2" ]
    then
        echo "Please specify a unique filename."
        echo "See 'qapers find' for more info."
    else
        LINE_NO=$(grep -n $2 $INDEX_YAML)
        LINE_NO=${LINE_NO%%:*}
        eval $YML_EDITOR +$LINE_NO $INDEX_YAML &
        disown
    fi
fi

# -----------------------------------------------------------------------------
# qapers review
# -----------------------------------------------------------------------------
# display bibliographic info and annotations for specified paper
if [ "$1" = "review" ]
then
    if [ -z "$2" ]
    then
        echo "Please specify a unique filename."
        echo "See 'qapers find' for more info."
    else
        JQ_CMD="jq -r '.Index[] .Paper |"
        JQ_CMD=$JQ_CMD" select( .PDF_file | contains(\"$2\") )"
        JQ_CMD=$JQ_CMD" ' $INDEX_JSON"
        eval $JQ_CMD | yq r -CP -
    fi
fi


# -----------------------------------------------------------------------------
# qapers tags
# -----------------------------------------------------------------------------
# display papers that match given list of tags or list all tags otherwise
if [ "$1" = "tags" ]
then
    if [ -z "$2" ]
    then
        echo -e "\033[1mSpecify a tag from the list below \033[0m"
        echo "(number indicates number of papers with the tag)"
        JQ_CMD="jq -r '.Index[] .Paper.Tags'"
        JQ_CMD="$JQ_CMD $INDEX_JSON | tr '\n' ',' | tr ',' '\n' | "
        JQ_CMD="$JQ_CMD sed 's/^ //g' | sort | uniq -c"
        eval $JQ_CMD
    else
        shift
        JQ_CMD="jq -r '.Index[] .Paper |"
        for TAG in "$@"
        do
            JQ_CMD=$JQ_CMD" select( .Tags | contains(\"$TAG\") ) |"
        done
        JQ_CMD=$JQ_CMD" .PDF_file ' $INDEX_JSON"
        eval $JQ_CMD
    fi
fi

# -----------------------------------------------------------------------------
# qapers index
# -----------------------------------------------------------------------------
# build index.qapers.yaml/json from scratch or update them to include new files
if [ "$1" = "index" ]
then
    if [ -z "$2" ]
    then
        echo "Please specify keyword: 'build' or 'update'."
        exit
    else
        if [ "$2" = "build" ]
        then
            PDF_LIST=$(ls $PDF_DIR/*.pdf)
            echo "Building YAML index for $(echo $PDF_LIST | wc -w) files..."
            echo > $INDEX_YAML
            echo -en "Index:\n" >> $INDEX_YAML 
            add_to_yaml "$PDF_LIST"
            echo Creating JSON index from YAML ...
            yq r $INDEX_YAML -j > $INDEX_JSON
            echo Done.
            exit
        fi
        if [ "$2" = "update" ]
        then
            echo Looking for new files in PDF directory ...
            LS_OUT1=$(ls -lh --time-style=+%Y%m%d%H%M $INDEX_JSON)
            LS_OUT2=${LS_OUT1%% $INDEX_JSON}
            LS_OUT3=${LS_OUT2% *}
            LAST_MOD=${LS_OUT2/$LS_OUT3}
            echo $LAST_MOD
            NEW_PDFS=$(find $PDF_DIR/*pdf -newerct "$LASTMOD")
            echo Found "$(echo $NEW_PDFS | wc -w)" new files
            add_to_yaml "$NEW_PDFS" 
            echo Updating JSON index from YAML ...
            yq r $INDEX_YAML -j > $INDEX_JSON
            echo Done.
        fi
    fi
fi

